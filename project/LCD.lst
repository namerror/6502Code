Sections:
00: "org0001:200" (200-358)
01: "org0002:2000" (2000-20AE)
02: "org0003:9000" (9000-9002)


Source: "LCD.asm"
                        	     1: ; Program for the LCD to do MOSI SPI
                        	     2: 
                        	     3: .cpu 6502
                        	     4: .equ outputKIM, 0x1700 ; variable for address of SPI pins (where output will be sent from), bit 7 is MOSI, bit 6 is SS,
                        	     5: .equ outputSettings, 0x1701 ; variable for address of output settings, where we can set pins to inputs or outputs
                        	     6: .equ inputKIM, 0x1702 ; port B for input
                        	     7: .equ inputSettings, 0x1703
                        	     8: 
                        	     9: .equ output, 0x1000 ; variable for address of output (for byte_send)
                        	    10: 
                        	    11: .equ byte1, 0x1001 ; variable for address of display address byte
                        	    12: .equ byte2, 0x1002 ; variable for address of display digit byte 
                        	    13: .equ dataCount, 0x0040 ; variable for address of counter of current letter
                        	    14: .equ pageAddressByte1, 0x0041 ; stores the lower byte of address of a new page of content
                        	    15: .equ pageAddressByte2, 0x0042 ; higher byte of address
                        	    16: .equ answerAddressByte1, 0x0051 ; stores the lower byte of the address of the answer to the current question
                        	    17: .equ answerAddressByte2, 0x0052 ; stores the higher byte of the address
                        	    18: .equ userAnswer, 0x0050 ; stores the user's answer
                        	    19: .org 0x0200
                        	    20: 
                        	    21: main:
                        	    22:     ; example code to display a HELLO
                        	    23:     ; data sheet: 
                        	    24: 
00:0200 202503          	    25:     JSR setup
                        	    26: 
                        	    27:     ; setup
                        	    28:     set_up:
                        	    29: 
                        	    30:         ; send data to turn on display
00:0203 A9FE            	    31:         LDA #0xFE
00:0205 204503          	    32:         JSR send_a
00:0208 A941            	    33:         LDA #0x41
00:020A 204503          	    34:         JSR send_a
                        	    35: 
                        	    36:         ; send data to clear screen
00:020D A9FE            	    37:         LDA #0xFE
00:020F 204503          	    38:         JSR send_a
00:0212 A951            	    39:         LDA #0x51
00:0214 204503          	    40:         JSR send_a
                        	    41: 
00:0217 204C03          	    42:         JSR delay
                        	    43: 
                        	    44: 
00:021A A900            	    45:     LDA #0x00
00:021C 8541            	    46:     STA pageAddressByte1
00:021E 8551            	    47:     STA answerAddressByte1
00:0220 A920            	    48:     LDA #0x20
00:0222 8542            	    49:     STA pageAddressByte2 ; default address at 0x2000
00:0224 A990            	    50:     LDA #0x90
00:0226 8552            	    51:     STA answerAddressByte2 ; default address for answers at 0x9000
                        	    52:     ; display the page
                        	    53:     send:
00:0228 A9FF            	    54:     LDA #0xFF
00:022A 8540            	    55:     STA dataCount ; initiallyzing the data count, by default it's -1 since we increment at the start of the loop
00:022C 20C002          	    56:     JSR display_letter ; displays the page
                        	    57: 
                        	    58:     wait_for_input:
00:022F AD0217          	    59:         LDA inputKIM
00:0232 C9FF            	    60:         CMP #0xFF
00:0234 F0F9            	    61:         BEQ wait_for_input ; keep looping until there's a button pressed
                        	    62:         wait_for_release:
00:0236 C9FF            	    63:         CMP #0xFF
00:0238 D0FC            	    64:         BNE wait_for_release ; need to release the button if pressed
                        	    65:     
                        	    66:     ; show option page that comes after the question page
00:023A A9FF            	    67:     LDA #0xFF 
00:023C 8540            	    68:     STA dataCount
00:023E 20C002          	    69:     JSR display_letter
                        	    70: 
                        	    71:     wait_for_answer:
00:0241 AD0217          	    72:         LDA inputKIM
00:0244 C9FF            	    73:         CMP #0xFF
00:0246 F0E7            	    74:         BEQ wait_for_input ; keep looping until there's a button pressed
00:0248 8550            	    75:         STA userAnswer ; saves user's answer the moment a button is pressed
                        	    76:         check_answer:
00:024A A000            	    77:             LDY #0
00:024C B151            	    78:             LDA (answerAddressByte1), Y ; load answer key
00:024E C550            	    79:             CMP userAnswer
00:0250 D006            	    80:             BNE wrong_answer
00:0252 206E02          	    81:             JSR show_answer_right
00:0255 4C5B02          	    82:             JMP finish
                        	    83:             wrong_answer:
00:0258 209202          	    84:             JSR show_answer_wrong
                        	    85:         finish:
00:025B 204C03          	    86:             JSR delay
00:025E 204C03          	    87:             JSR delay
00:0261 204C03          	    88:             JSR delay
00:0264 E651            	    89:             INC answerAddressByte1
00:0266 D002            	    90:             BNE no_carry
00:0268 E652            	    91:             INC answerAddressByte2
                        	    92:             no_carry:
00:026A 4C2802          	    93:             JMP send
                        	    94: 
00:026D 00              	    95:     BRK
                        	    96: 
                        	    97:     # 0x1C
                        	    98: 
                        	    99: show_answer_right:
00:026E A943            	   100:     LDA #'C'
00:0270 204503          	   101:     JSR send_a
00:0273 A94F            	   102:     LDA #'O'
00:0275 204503          	   103:     JSR send_a
00:0278 A952            	   104:     LDA #'R'
00:027A 204503          	   105:     JSR send_a
00:027D A952            	   106:     LDA #'R'
00:027F 204503          	   107:     JSR send_a  
00:0282 A945            	   108:     LDA #'E'
00:0284 204503          	   109:     JSR send_a 
00:0287 A943            	   110:     LDA #'C'
00:0289 204503          	   111:     JSR send_a
00:028C A954            	   112:     LDA #'T'
00:028E 204503          	   113:     JSR send_a 
00:0291 60              	   114:     RTS
                        	   115: 
                        	   116: show_answer_wrong:
00:0292 A949            	   117:     LDA #'I'
00:0294 204503          	   118:     JSR send_a
00:0297 A94E            	   119:     LDA #'N'
00:0299 204503          	   120:     JSR send_a
00:029C A943            	   121:     LDA #'C'
00:029E 204503          	   122:     JSR send_a
00:02A1 A94F            	   123:     LDA #'O'
00:02A3 204503          	   124:     JSR send_a
00:02A6 A952            	   125:     LDA #'R'
00:02A8 204503          	   126:     JSR send_a
00:02AB A952            	   127:     LDA #'R'
00:02AD 204503          	   128:     JSR send_a  
00:02B0 A945            	   129:     LDA #'E'
00:02B2 204503          	   130:     JSR send_a 
00:02B5 A943            	   131:     LDA #'C'
00:02B7 204503          	   132:     JSR send_a
00:02BA A954            	   133:     LDA #'T'
00:02BC 204503          	   134:     JSR send_a 
00:02BF 60              	   135:     RTS
                        	   136: 
                        	   137: display_letter:
00:02C0 A440            	   138:     LDY dataCount
00:02C2 C8              	   139:     INY
00:02C3 8440            	   140:     STY dataCount ; increment the count
00:02C5 B141            	   141:     LDA (0x0041), Y
00:02C7 F006            	   142:     BEQ end
00:02C9 204503          	   143:     JSR send_a
00:02CC 4CC002          	   144:     JMP display_letter
                        	   145: 
                        	   146:     end:
                        	   147:     ; update the two bytes storing the next address
00:02CF C8              	   148:     INY ; to the next address 
00:02D0 A541            	   149:     LDA 0x41
00:02D2 18              	   150:     CLC
00:02D3 6900            	   151:     ADC #0 ; clear carry
00:02D5 98              	   152:     TYA
00:02D6 6541            	   153:     ADC 0x41
00:02D8 8541            	   154:     STA 0x41
                        	   155: 
00:02DA A542            	   156:     LDA 0x42
00:02DC 6900            	   157:     ADC #0 ; add carry
00:02DE 8542            	   158:     STA 0x42
00:02E0 60              	   159:     RTS
                        	   160: 
                        	   161: byte_send: ; subroutine to send 8 bits (bit 7 is data, bit 6 is CS/SS, bit 5 is CLK)
                        	   162: 
                        	   163:     set_cs_low:
00:02E1 AD0017          	   164:         LDA outputKIM
00:02E4 29BF            	   165:         AND #0b10111111  ; Pull SS (bit 6) low
00:02E6 8D0017          	   166:         STA outputKIM
                        	   167: 
                        	   168:     set_clk_high: ; set the clock low before getting data in pin 7
00:02E9 AD0017          	   169:         LDA outputKIM
00:02EC 0920            	   170:         ORA #0b00100000   ; Pull CLK (bit 5) high
00:02EE 8D0017          	   171:         STA outputKIM
                        	   172:     
                        	   173:     set_counter: ; counter to see how many bits have been sent of byte
00:02F1 A208            	   174:         LDX #0x08
                        	   175:         
                        	   176:     send_output: ; send byte of data
                        	   177:         
                        	   178:         ; store output bit in outputKIM bit 7
00:02F3 AD0010          	   179:         LDA output ; load output into accumulator
00:02F6 2980            	   180:         AND #0b10000000 ; AND output so only last bit is recognized
00:02F8 0D0017          	   181:         ORA outputKIM ; OR output to what's in 0x1700, nothing is changed except last bit
00:02FB 8D0017          	   182:         STA outputKIM ; store result in KIM output bit
                        	   183:         
00:02FE 0E0010          	   184:         ASL output ; arithmetic shift left of output1 to move next output1 bit to bit 0
                        	   185:     
                        	   186:     clk_cycle: ; simulate a clock cycle that occurs
                        	   187:                ; data has to be stable before clock rising edge
                        	   188:         
00:0301 AD0017          	   189:         LDA outputKIM ;load outputKIM into memory
00:0304 4920            	   190:         EOR #0b00100000 ; Invert SCLK (bit 5)
00:0306 8D0017          	   191:         STA outputKIM ; Store into outputKIM
                        	   192:         
00:0309 AD0017          	   193:         LDA outputKIM ; load outputKIM
00:030C 4920            	   194:         EOR #0b00100000 ; Invert SCLK (bit 5)
00:030E 8D0017          	   195:         STA outputKIM ; Store into outputKIM
                        	   196:         
00:0311 AD0017          	   197:         LDA outputKIM ; set final digit of outputKIM to 0 so it is modified correctly on next edge
00:0314 297F            	   198:         AND #0b01111111
00:0316 8D0017          	   199:         STA outputKIM
                        	   200:         
00:0319 CA              	   201:         DEX ; decrement number of bits remaining to be sent
                        	   202:         
00:031A D0D7            	   203:         BNE send_output ; jump to send_output for next bit
                        	   204: 
                        	   205:     set_cs_high:
00:031C AD0017          	   206:         LDA outputKIM
00:031F 0940            	   207:         ORA #0b01000000  ; Pull SS (bit 6) high
00:0321 8D0017          	   208:         STA outputKIM
                        	   209:         
00:0324 60              	   210:     RTS ; end subroutine
                        	   211: 
                        	   212: setup: ; setup subroutine
                        	   213: 
                        	   214:     clear_decimal_mode:
00:0325 D8              	   215:         CLD
                        	   216:     
                        	   217:     set_initial_output_state: ; set outputKIM to 0x00
00:0326 A900            	   218:         LDA #0x00
00:0328 8D0017          	   219:         STA outputKIM
                        	   220:     
                        	   221:     set_initial_input_state:
00:032B A900            	   222:         LDA #0x00
00:032D 8D0217          	   223:         STA inputKIM
                        	   224:     
                        	   225:     make_output: ; make port A an output
00:0330 A9FF            	   226:         LDA #0xFF
00:0332 8D0117          	   227:         STA outputSettings
                        	   228:     
                        	   229:     make_input: ; make port B an input
00:0335 A900            	   230:         LDA #0x00
00:0337 8D0317          	   231:         STA inputSettings
                        	   232:     
                        	   233:     set_low: ; Pull SS low and CLK pin high by ANDing with outputKIM and storing it back
00:033A AD0017          	   234:             LDA outputKIM
00:033D 0920            	   235:             ORA #0b00100000  ; Pull CLK (bit 5) high
00:033F 29BF            	   236:             AND #0b10111111  ; Pull SS (bit 6) low
00:0341 8D0017          	   237:             STA outputKIM
                        	   238:             
00:0344 60              	   239:     RTS
                        	   240: 
                        	   241: send_a:
00:0345 8D0010          	   242:     STA output
00:0348 20E102          	   243:     JSR byte_send
00:034B 60              	   244:     RTS
                        	   245: 
                        	   246: delay: ; delay subroutine
                        	   247: 
00:034C A2FF            	   248:     LDX #0xFF ; Load X with outer loop count (e.g., 255)
                        	   249:     outer_loop:
                        	   250:     
00:034E A9FF            	   251:             LDA #0xFF
                        	   252:             inner_loop:
00:0350 E901            	   253:                 SBC #0x01
00:0352 D0FC            	   254:                 BNE inner_loop
                        	   255:             
00:0354 CA              	   256:         DEX
00:0355 D0F7            	   257:         BNE outer_loop
                        	   258:         
00:0357 60              	   259:     RTS ; end subroutine
                        	   260: 
                        	   261: 
                        	   262: .org 0x2000 ; 
                        	   263: .include "file.txt" ; file including text data for display

Source: "file.txt"
01:2000 51              	     1: .byte "Q", ":", " ", "W", "h", "e", "r", "e", " ", "i", "s", " ", "t", "h", "e"
01:2001 3A
01:2002 20
01:2003 57
01:2004 68
01:2005 65
01:2006 72
01:2007 65
01:2008 20
01:2009 69
01:200A 73
01:200B 20
01:200C 74
01:200D 68
01:200E 65
01:200F FE              	     2: .byte 0xFE, 0x45, 0x40
01:2010 45
01:2011 40
01:2012 45              	     3: .byte "E", "f", "f", "e", "l", " ", "T", "o", "w", "e", "r", "?"
01:2013 66
01:2014 66
01:2015 65
01:2016 6C
01:2017 20
01:2018 54
01:2019 6F
01:201A 77
01:201B 65
01:201C 72
01:201D 3F
01:201E 00              	     4: .byte 0
01:201F 31              	     5: .byte "1", ".", " ", "P", "a", "r", "i", "s", " ", "2", ".", " ", "P", "r", "a", "g", "u", "e"
01:2020 2E
01:2021 20
01:2022 50
01:2023 61
01:2024 72
01:2025 69
01:2026 73
01:2027 20
01:2028 32
01:2029 2E
01:202A 20
01:202B 50
01:202C 72
01:202D 61
01:202E 67
01:202F 75
01:2030 65
01:2031 FE              	     6: .byte 0xFE, 0x45, 0x40
01:2032 45
01:2033 40
01:2034 33              	     7: .byte "3", ".", " ", "L", "o", "n", "d", "o", "n", " ", "4", ".", " ", "B", "e", "r", "l", "i", "n"
01:2035 2E
01:2036 20
01:2037 4C
01:2038 6F
01:2039 6E
01:203A 64
01:203B 6F
01:203C 6E
01:203D 20
01:203E 34
01:203F 2E
01:2040 20
01:2041 42
01:2042 65
01:2043 72
01:2044 6C
01:2045 69
01:2046 6E
01:2047 00              	     8: .byte 0
01:2048 51              	     9: .byte "Q", ":", " ", "W", "h", "o", " ", "i", "n", "v", "e", "n", "t", "e", "d", " ", "t", "h", "e"
01:2049 3A
01:204A 20
01:204B 57
01:204C 68
01:204D 6F
01:204E 20
01:204F 69
01:2050 6E
01:2051 76
01:2052 65
01:2053 6E
01:2054 74
01:2055 65
01:2056 64
01:2057 20
01:2058 74
01:2059 68
01:205A 65
01:205B FE              	    10: .byte 0xFE, 0x45, 0x40
01:205C 45
01:205D 40
01:205E 74              	    11: .byte "t", "e", "l", "e", "p", "h", "o", "n", "e", "?"
01:205F 65
01:2060 6C
01:2061 65
01:2062 70
01:2063 68
01:2064 6F
01:2065 6E
01:2066 65
01:2067 3F
01:2068 00              	    12: .byte 0
01:2069 31              	    13: .byte "1", ".", " ", "E", "d", "i", "s", "o", "n", " ", "2", "."
01:206A 2E
01:206B 20
01:206C 45
01:206D 64
01:206E 69
01:206F 73
01:2070 6F
01:2071 6E
01:2072 20
01:2073 32
01:2074 2E
01:2075 FE              	    14: .byte 0xFE, 0x45, 0x40
01:2076 45
01:2077 40
01:2078 41              	    15: .byte "A", "l", "e", "x", "a", "n", "d", "e", "r", " ", "G", "r", "a", "h", "a", "m"
01:2079 6C
01:207A 65
01:207B 78
01:207C 61
01:207D 6E
01:207E 64
01:207F 65
01:2080 72
01:2081 20
01:2082 47
01:2083 72
01:2084 61
01:2085 68
01:2086 61
01:2087 6D
01:2088 FE              	    16: .byte 0xFE, 0x45, 0x14
01:2089 45
01:208A 14
01:208B 42              	    17: .byte "B", "e", "l", "l", " ", "3", ".", " ", "N", "i", "k", "o", "l", "a", " ", "T", "e", "s", "l", "a"
01:208C 65
01:208D 6C
01:208E 6C
01:208F 20
01:2090 33
01:2091 2E
01:2092 20
01:2093 4E
01:2094 69
01:2095 6B
01:2096 6F
01:2097 6C
01:2098 61
01:2099 20
01:209A 54
01:209B 65
01:209C 73
01:209D 6C
01:209E 61
01:209F FE              	    18: .byte 0xFE, 0x45, 0x54
01:20A0 45
01:20A1 54
01:20A2 34              	    19: .byte "4", ".", " ", "E", "i", "n", "s", "t", "e", "i", "n"
01:20A3 2E
01:20A4 20
01:20A5 45
01:20A6 69
01:20A7 6E
01:20A8 73
01:20A9 74
01:20AA 65
01:20AB 69
01:20AC 6E
01:20AD 00              	    20: .byte 0

Source: "LCD.asm"
                        	   264: 
                        	   265: .org 0x9000
                        	   266: .include "answers.txt" ; file including answer keys

Source: "answers.txt"
02:9000 FE              	     1: .byte 0b11111110
02:9001 FD              	     2: .byte 0b11111101

Source: "LCD.asm"
                        	   267: ; put data or whatever here
                        	   268: ; .include "file.txt" or something


Symbols by name:
answerAddressByte1               S:0051
answerAddressByte2               S:0052
byte_send                        A:02E1
check_answer                     A:024A
clear_decimal_mode               A:0325
clk_cycle                        A:0301
dataCount                        S:0040
delay                            A:034C
display_letter                   A:02C0
end                              A:02CF
finish                           A:025B
inner_loop                       A:0350
inputKIM                         S:1702
inputSettings                    S:1703
main                             A:0200
make_input                       A:0335
make_output                      A:0330
no_carry                         A:026A
outer_loop                       A:034E
output                           S:1000
outputKIM                        S:1700
outputSettings                   S:1701
pageAddressByte1                 S:0041
pageAddressByte2                 S:0042
send                             A:0228
send_a                           A:0345
send_output                      A:02F3
set_clk_high                     A:02E9
set_counter                      A:02F1
set_cs_high                      A:031C
set_cs_low                       A:02E1
set_initial_input_state          A:032B
set_initial_output_state         A:0326
set_low                          A:033A
set_up                           A:0203
setup                            A:0325
show_answer_right                A:026E
show_answer_wrong                A:0292
userAnswer                       S:0050
wait_for_answer                  A:0241
wait_for_input                   A:022F
wait_for_release                 A:0236
wrong_answer                     A:0258

Symbols by value:
0040 dataCount
0041 pageAddressByte1
0042 pageAddressByte2
0050 userAnswer
0051 answerAddressByte1
0052 answerAddressByte2
0200 main
0203 set_up
0228 send
022F wait_for_input
0236 wait_for_release
0241 wait_for_answer
024A check_answer
0258 wrong_answer
025B finish
026A no_carry
026E show_answer_right
0292 show_answer_wrong
02C0 display_letter
02CF end
02E1 set_cs_low
02E1 byte_send
02E9 set_clk_high
02F1 set_counter
02F3 send_output
0301 clk_cycle
031C set_cs_high
0325 setup
0325 clear_decimal_mode
0326 set_initial_output_state
032B set_initial_input_state
0330 make_output
0335 make_input
033A set_low
0345 send_a
034C delay
034E outer_loop
0350 inner_loop
1000 output
1700 outputKIM
1701 outputSettings
1702 inputKIM
1703 inputSettings

Sections:
00: "org0001:200" (200-2C0)
01: "org0002:2000" (2000-210E)


Source: "LCD.asm"
                        	     1: ; Program for the LCD to do MOSI SPI
                        	     2: 
                        	     3: .cpu 6502
                        	     4: .equ outputKIM, 0x1700 ; variable for address of SPI pins (where output will be sent from), bit 7 is MOSI, bit 6 is SS,
                        	     5: .equ outputSettings, 0x1701 ; variable for address of output settings, where we can set pins to inputs or outputs
                        	     6: .equ inputKim, 0x1702 ; port B for input
                        	     7: 
                        	     8: .equ output, 0x1000 ; variable for address of output (for byte_send)
                        	     9: 
                        	    10: .equ byte1, 0x1001 ; variable for address of display address byte
                        	    11: .equ byte2, 0x1002 ; variable for address of display digit byte 
                        	    12: .equ dataCount, 0x0040 ; variable for address of counter of current letter
                        	    13: .equ pageAddressByte1, 0x0041 ; stores the lower byte of address of a new page of content
                        	    14: .equ pageAddressByte2, 0x0042 ; higher byte of address
                        	    15: .org 0x0200
                        	    16: 
                        	    17: main:
                        	    18:     ; example code to display a HELLO
                        	    19:     ; data sheet: 
                        	    20: 
00:0200 209702          	    21:     JSR setup
                        	    22: 
                        	    23:     ; setup
                        	    24:     set_up:
                        	    25: 
                        	    26:         ; send data to turn on display
00:0203 A9FE            	    27:         LDA #0xFE
00:0205 20AD02          	    28:         JSR send_a
00:0208 A941            	    29:         LDA #0x41
00:020A 20AD02          	    30:         JSR send_a
                        	    31: 
                        	    32:         ; send data to clear screen
00:020D A9FE            	    33:         LDA #0xFE
00:020F 20AD02          	    34:         JSR send_a
00:0212 A951            	    35:         LDA #0x51
00:0214 20AD02          	    36:         JSR send_a
                        	    37: 
00:0217 20B402          	    38:         JSR delay
                        	    39: 
                        	    40: 
00:021A A900            	    41:     LDA #0x00
00:021C 8541            	    42:     STA pageAddressByte1
00:021E A920            	    43:     LDA #0x20
00:0220 8542            	    44:     STA pageAddressByte2 ; default address at 0x2000
                        	    45:     ; display the page
                        	    46:     send:
00:0222 A9FF            	    47:     LDA #0xFF
00:0224 8540            	    48:     STA dataCount ; initiallyzing the data count, by default it's -1 since we increment at the start of the loop
                        	    49: 
00:0226 203302          	    50:     JSR display_letter
00:0229 20B402          	    51:     JSR delay
00:022C 20B402          	    52:     JSR delay
00:022F 4C2202          	    53:     JMP send
00:0232 00              	    54:     BRK
                        	    55: 
                        	    56:     # 0x1C
                        	    57: 
                        	    58: 
                        	    59: display_letter:
00:0233 A440            	    60:     LDY dataCount
00:0235 C8              	    61:     INY
00:0236 8440            	    62:     STY dataCount ; increment the count
00:0238 B141            	    63:     LDA (0x0041), Y
00:023A F006            	    64:     BEQ end
00:023C 20AD02          	    65:     JSR send_a
00:023F 4C3302          	    66:     JMP display_letter
                        	    67: 
                        	    68:     end:
                        	    69:     ; update the two bytes storing the next address
00:0242 A541            	    70:     LDA 0x41
00:0244 18              	    71:     CLC
00:0245 6900            	    72:     ADC #0 ; clear carry
00:0247 98              	    73:     TYA
00:0248 6541            	    74:     ADC 0x41
00:024A 8541            	    75:     STA 0x41
                        	    76: 
00:024C A542            	    77:     LDA 0x42
00:024E 6900            	    78:     ADC #0 ; add carry
00:0250 8542            	    79:     STA 0x42
00:0252 60              	    80:     RTS
                        	    81: 
                        	    82: byte_send: ; subroutine to send 8 bits (bit 7 is data, bit 6 is CS/SS, bit 5 is CLK)
                        	    83: 
                        	    84:     set_cs_low:
00:0253 AD0017          	    85:         LDA outputKIM
00:0256 29BF            	    86:         AND #0b10111111  ; Pull SS (bit 6) low
00:0258 8D0017          	    87:         STA outputKIM
                        	    88: 
                        	    89:     set_clk_high: ; set the clock low before getting data in pin 7
00:025B AD0017          	    90:         LDA outputKIM
00:025E 0920            	    91:         ORA #0b00100000   ; Pull CLK (bit 5) high
00:0260 8D0017          	    92:         STA outputKIM
                        	    93:     
                        	    94:     set_counter: ; counter to see how many bits have been sent of byte
00:0263 A208            	    95:         LDX #0x08
                        	    96:         
                        	    97:     send_output: ; send byte of data
                        	    98:         
                        	    99:         ; store output bit in outputKIM bit 7
00:0265 AD0010          	   100:         LDA output ; load output into accumulator
00:0268 2980            	   101:         AND #0b10000000 ; AND output so only last bit is recognized
00:026A 0D0017          	   102:         ORA outputKIM ; OR output to what's in 0x1700, nothing is changed except last bit
00:026D 8D0017          	   103:         STA outputKIM ; store result in KIM output bit
                        	   104:         
00:0270 0E0010          	   105:         ASL output ; arithmetic shift left of output1 to move next output1 bit to bit 0
                        	   106:     
                        	   107:     clk_cycle: ; simulate a clock cycle that occurs
                        	   108:                ; data has to be stable before clock rising edge
                        	   109:         
00:0273 AD0017          	   110:         LDA outputKIM ;load outputKIM into memory
00:0276 4920            	   111:         EOR #0b00100000 ; Invert SCLK (bit 5)
00:0278 8D0017          	   112:         STA outputKIM ; Store into outputKIM
                        	   113:         
00:027B AD0017          	   114:         LDA outputKIM ; load outputKIM
00:027E 4920            	   115:         EOR #0b00100000 ; Invert SCLK (bit 5)
00:0280 8D0017          	   116:         STA outputKIM ; Store into outputKIM
                        	   117:         
00:0283 AD0017          	   118:         LDA outputKIM ; set final digit of outputKIM to 0 so it is modified correctly on next edge
00:0286 297F            	   119:         AND #0b01111111
00:0288 8D0017          	   120:         STA outputKIM
                        	   121:         
00:028B CA              	   122:         DEX ; decrement number of bits remaining to be sent
                        	   123:         
00:028C D0D7            	   124:         BNE send_output ; jump to send_output for next bit
                        	   125: 
                        	   126:     set_cs_high:
00:028E AD0017          	   127:         LDA outputKIM
00:0291 0940            	   128:         ORA #0b01000000  ; Pull SS (bit 6) high
00:0293 8D0017          	   129:         STA outputKIM
                        	   130:         
00:0296 60              	   131:     RTS ; end subroutine
                        	   132: 
                        	   133: setup: ; setup subroutine
                        	   134: 
                        	   135:     clear_decimal_mode:
00:0297 D8              	   136:         CLD
                        	   137:     
                        	   138:     set_initial_output_state: ; set outputKIM to 0x00
00:0298 A900            	   139:         LDA #0x00
00:029A 8D0017          	   140:         STA outputKIM
                        	   141:     
                        	   142:     make_output: ; make port A an output
00:029D A9FF            	   143:         LDA #0xFF
00:029F 8D0117          	   144:         STA outputSettings
                        	   145:     
                        	   146:     set_low: ; Pull SS low and CLK pin high by ANDing with outputKIM and storing it back
00:02A2 AD0017          	   147:             LDA outputKIM
00:02A5 0920            	   148:             ORA #0b00100000  ; Pull CLK (bit 5) high
00:02A7 29BF            	   149:             AND #0b10111111  ; Pull SS (bit 6) low
00:02A9 8D0017          	   150:             STA outputKIM
                        	   151:             
00:02AC 60              	   152:     RTS
                        	   153: 
                        	   154: send_a:
00:02AD 8D0010          	   155:     STA output
00:02B0 205302          	   156:     JSR byte_send
00:02B3 60              	   157:     RTS
                        	   158: 
                        	   159: delay: ; delay subroutine
                        	   160: 
00:02B4 A2FF            	   161:     LDX #0xFF ; Load X with outer loop count (e.g., 255)
                        	   162:     outer_loop:
                        	   163:     
00:02B6 A9FF            	   164:             LDA #0xFF
                        	   165:             inner_loop:
00:02B8 E901            	   166:                 SBC #0x01
00:02BA D0FC            	   167:                 BNE inner_loop
                        	   168:             
00:02BC CA              	   169:         DEX
00:02BD D0F7            	   170:         BNE outer_loop
                        	   171:         
00:02BF 60              	   172:     RTS ; end subroutine
                        	   173: 
                        	   174: 
                        	   175: .org 0x2000 ; 
                        	   176: .include "file.txt"

Source: "file.txt"
01:2000 54              	     1: .byte "T", "H", "E", " ", "Q", "U", "I", "C", "K", " ", "B", "R", "O", "W", "N", " ", "F", "O", "X", " "
01:2001 48
01:2002 45
01:2003 20
01:2004 51
01:2005 55
01:2006 49
01:2007 43
01:2008 4B
01:2009 20
01:200A 42
01:200B 52
01:200C 4F
01:200D 57
01:200E 4E
01:200F 20
01:2010 46
01:2011 4F
01:2012 58
01:2013 20
01:2014 FE              	     2: .byte 0xFE, 0x45, 0x40
01:2015 45
01:2016 40
01:2017 4A              	     3: .byte "J", "U", "M", "P", "S", " ", "O", "V", "E", "R", " ", "T", "H", "E", " ", "L", "A", "Z", "Y", " "
01:2018 55
01:2019 4D
01:201A 50
01:201B 53
01:201C 20
01:201D 4F
01:201E 56
01:201F 45
01:2020 52
01:2021 20
01:2022 54
01:2023 48
01:2024 45
01:2025 20
01:2026 4C
01:2027 41
01:2028 5A
01:2029 59
01:202A 20
01:202B FE              	     4: .byte 0xFE, 0x45, 0x14
01:202C 45
01:202D 14
01:202E 44              	     5: .byte "D", "O", "G", ".", " ", "T", "H", "I", "S", " ", "I", "S", " ", "L", "I", "N", "E", " ", " ", " "
01:202F 4F
01:2030 47
01:2031 2E
01:2032 20
01:2033 54
01:2034 48
01:2035 49
01:2036 53
01:2037 20
01:2038 49
01:2039 53
01:203A 20
01:203B 4C
01:203C 49
01:203D 4E
01:203E 45
01:203F 20
01:2040 20
01:2041 20
01:2042 FE              	     6: .byte 0xFE, 0x45, 0x54
01:2043 45
01:2044 54
01:2045 46              	     7: .byte "F", "O", "U", "R", ".", ".", ".", " ", "A", "N", "D", " ", "T", "H", "I", "S", " ", "I", "S", " "
01:2046 4F
01:2047 55
01:2048 52
01:2049 2E
01:204A 2E
01:204B 2E
01:204C 20
01:204D 41
01:204E 4E
01:204F 44
01:2050 20
01:2051 54
01:2052 48
01:2053 49
01:2054 53
01:2055 20
01:2056 49
01:2057 53
01:2058 20
01:2059 00              	     8: .byte 0
01:205A 41              	     9: .byte "A", "N", "O", "T", "H", "E", "R", " ", "P", "A", "G", "E", " ", "O", "F", " ", "T", "E", "X", "T"
01:205B 4E
01:205C 4F
01:205D 54
01:205E 48
01:205F 45
01:2060 52
01:2061 20
01:2062 50
01:2063 41
01:2064 47
01:2065 45
01:2066 20
01:2067 4F
01:2068 46
01:2069 20
01:206A 54
01:206B 45
01:206C 58
01:206D 54
01:206E FE              	    10: .byte 0xFE, 0x45, 0x40
01:206F 45
01:2070 40
01:2071 54              	    11: .byte "T", "O", " ", "S", "H", "O", "W", " ", "T", "H", "A", "T", " ", " ", " ", " ", " ", " ", " ", " "
01:2072 4F
01:2073 20
01:2074 53
01:2075 48
01:2076 4F
01:2077 57
01:2078 20
01:2079 54
01:207A 48
01:207B 41
01:207C 54
01:207D 20
01:207E 20
01:207F 20
01:2080 20
01:2081 20
01:2082 20
01:2083 20
01:2084 20
01:2085 FE              	    12: .byte 0xFE, 0x45, 0x14
01:2086 45
01:2087 14
01:2088 4D              	    13: .byte "M", "U", "L", "T", "I", "P", "L", "E", " ", "P", "A", "G", "E", "S", " ", "W", "O", "R", "K", "!"
01:2089 55
01:208A 4C
01:208B 54
01:208C 49
01:208D 50
01:208E 4C
01:208F 45
01:2090 20
01:2091 50
01:2092 41
01:2093 47
01:2094 45
01:2095 53
01:2096 20
01:2097 57
01:2098 4F
01:2099 52
01:209A 4B
01:209B 21
01:209C FE              	    14: .byte 0xFE, 0x45, 0x54
01:209D 45
01:209E 54
01:209F 45              	    15: .byte "E", "A", "C", "H", " ", "P", "A", "G", "E", " ", "H", "A", "S", " ", "F", "O", "U", "R", " ", " "
01:20A0 41
01:20A1 43
01:20A2 48
01:20A3 20
01:20A4 50
01:20A5 41
01:20A6 47
01:20A7 45
01:20A8 20
01:20A9 48
01:20AA 41
01:20AB 53
01:20AC 20
01:20AD 46
01:20AE 4F
01:20AF 55
01:20B0 52
01:20B1 20
01:20B2 20
01:20B3 00              	    16: .byte 0
01:20B4 4C              	    17: .byte "L", "I", "N", "E", "S", " ", "O", "F", " ", "2", "0", " ", " ", " ", " ", " ", " ", " ", " ", " "
01:20B5 49
01:20B6 4E
01:20B7 45
01:20B8 53
01:20B9 20
01:20BA 4F
01:20BB 46
01:20BC 20
01:20BD 32
01:20BE 30
01:20BF 20
01:20C0 20
01:20C1 20
01:20C2 20
01:20C3 20
01:20C4 20
01:20C5 20
01:20C6 20
01:20C7 20
01:20C8 FE              	    18: .byte 0xFE, 0x45, 0x40
01:20C9 45
01:20CA 40
01:20CB 43              	    19: .byte "C", "H", "A", "R", "A", "C", "T", "E", "R", "S", ",", " ", "F", "I", "L", "L", "E", "D", " ", " "
01:20CC 48
01:20CD 41
01:20CE 52
01:20CF 41
01:20D0 43
01:20D1 54
01:20D2 45
01:20D3 52
01:20D4 53
01:20D5 2C
01:20D6 20
01:20D7 46
01:20D8 49
01:20D9 4C
01:20DA 4C
01:20DB 45
01:20DC 44
01:20DD 20
01:20DE 20
01:20DF FE              	    20: .byte 0xFE, 0x45, 0x14
01:20E0 45
01:20E1 14
01:20E2 42              	    21: .byte "B", "Y", " ", "S", "M", "A", "R", "T", " ", "W", "R", "A", "P", "P", "I", "N", "G", ".", " ", " "
01:20E3 59
01:20E4 20
01:20E5 53
01:20E6 4D
01:20E7 41
01:20E8 52
01:20E9 54
01:20EA 20
01:20EB 57
01:20EC 52
01:20ED 41
01:20EE 50
01:20EF 50
01:20F0 49
01:20F1 4E
01:20F2 47
01:20F3 2E
01:20F4 20
01:20F5 20
01:20F6 FE              	    22: .byte 0xFE, 0x45, 0x54
01:20F7 45
01:20F8 54
01:20F9 20              	    23: .byte " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "
01:20FA 20
01:20FB 20
01:20FC 20
01:20FD 20
01:20FE 20
01:20FF 20
01:2100 20
01:2101 20
01:2102 20
01:2103 20
01:2104 20
01:2105 20
01:2106 20
01:2107 20
01:2108 20
01:2109 20
01:210A 20
01:210B 20
01:210C 20
01:210D 00              	    24: .byte 0

Source: "LCD.asm"
                        	   177: ; put data or whatever here
                        	   178: ; .include "file.txt" or something


Symbols by name:
byte_send                        A:0253
clear_decimal_mode               A:0297
clk_cycle                        A:0273
dataCount                        S:0040
delay                            A:02B4
display_letter                   A:0233
end                              A:0242
inner_loop                       A:02B8
main                             A:0200
make_output                      A:029D
outer_loop                       A:02B6
output                           S:1000
outputKIM                        S:1700
outputSettings                   S:1701
pageAddressByte1                 S:0041
pageAddressByte2                 S:0042
send                             A:0222
send_a                           A:02AD
send_output                      A:0265
set_clk_high                     A:025B
set_counter                      A:0263
set_cs_high                      A:028E
set_cs_low                       A:0253
set_initial_output_state         A:0298
set_low                          A:02A2
set_up                           A:0203
setup                            A:0297

Symbols by value:
0040 dataCount
0041 pageAddressByte1
0042 pageAddressByte2
0200 main
0203 set_up
0222 send
0233 display_letter
0242 end
0253 set_cs_low
0253 byte_send
025B set_clk_high
0263 set_counter
0265 send_output
0273 clk_cycle
028E set_cs_high
0297 clear_decimal_mode
0297 setup
0298 set_initial_output_state
029D make_output
02A2 set_low
02AD send_a
02B4 delay
02B6 outer_loop
02B8 inner_loop
1000 output
1700 outputKIM
1701 outputSettings
